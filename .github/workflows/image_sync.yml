name: Docker Image Sync to GHCR

on:
  # Executa quando acionado manualmente
  workflow_dispatch:
    inputs:
      image_name:
        description: 'Nome da imagem (ex: ethereum/client-go)'
        required: true
      image_tag:
        description: 'Tag da imagem (ex: release-1.10)'
        required: true
      force_resync:
        description: 'Forçar ressincronização mesmo se a imagem já existir'
        required: false
        type: boolean
        default: false
  
  # Executa diariamente às 2h da manhã
  schedule:
    - cron: '0 2 * * *'
  
  # Permite que seja acionado por outro workflow ou API
  repository_dispatch:
    types: [image_sync_requested]

jobs:
  sync-image:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Determinar imagem a sincronizar
        id: set-image-info
        run: |
          # Usa inputs do workflow_dispatch se disponíveis
          if [[ -n "${{ github.event.inputs.image_name }}" ]]; then
            IMAGE_NAME="${{ github.event.inputs.image_name }}"
            IMAGE_TAG="${{ github.event.inputs.image_tag }}"
            FORCE_RESYNC="${{ github.event.inputs.force_resync }}"
          # Usa dados do repository_dispatch
          elif [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            IMAGE_NAME="${{ github.event.client_payload.image_name }}"
            IMAGE_TAG="${{ github.event.client_payload.image_tag }}"
            FORCE_RESYNC="${{ github.event.client_payload.force_resync || 'false' }}"
          # Para execução agendada, verificar imagens predefinidas
          else
            # Lista de imagens a verificar na execução agendada
            IMAGE_NAME="ethereum/client-go"
            IMAGE_TAG="release-1.10"
            FORCE_RESYNC="false"
          fi
          
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "FORCE_RESYNC=${FORCE_RESYNC}" >> $GITHUB_ENV
          
          # Para GHCR, mantemos o formato completo
          GHCR_IMAGE="ghcr.io/italoag/public/${IMAGE_NAME}:${IMAGE_TAG}"
          echo "GHCR_IMAGE=${GHCR_IMAGE}" >> $GITHUB_ENV
          
          # Log para depuração
          echo "Imagem definida: ${IMAGE_NAME}:${IMAGE_TAG}"
          echo "GHCR destino: ${GHCR_IMAGE}"
          echo "Forçar ressincronização: ${FORCE_RESYNC}"
      
      - name: Verificar se a imagem existe no GHCR
        id: check-ghcr
        continue-on-error: true
        run: |
          # Extrair caminho da imagem para o GHCR
          if [[ "${{ env.IMAGE_NAME }}" == *"/"* ]]; then
            # Imagem com namespace (ex: ethereum/client-go)
            GHCR_PATH="italoag/public/${{ env.IMAGE_NAME }}"
          else
            # Imagem simples (ex: postgres)
            GHCR_PATH="italoag/public/${{ env.IMAGE_NAME }}"
          fi
          
          # Verificação HTTP para o manifesto da imagem no GHCR
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GHCR_PAT }}" \
            "https://ghcr.io/v2/${GHCR_PATH}/manifests/${{ env.IMAGE_TAG }}")
          
          echo "Status HTTP GHCR: $STATUS_CODE"
          echo "URL verificada: https://ghcr.io/v2/${GHCR_PATH}/manifests/${{ env.IMAGE_TAG }}"
          
          if [[ "$STATUS_CODE" == "200" && "${{ env.FORCE_RESYNC }}" != "true" ]]; then
            echo "IMAGEM_EXISTE=true" >> $GITHUB_ENV
            echo "Imagem encontrada no GHCR e ressincronização não forçada"
          else
            if [[ "$STATUS_CODE" == "200" && "${{ env.FORCE_RESYNC }}" == "true" ]]; then
              echo "Imagem encontrada no GHCR, mas será ressincronizada devido à flag de força"
            else
              echo "Imagem não encontrada no GHCR (Status: $STATUS_CODE)"
            fi
            echo "IMAGEM_EXISTE=false" >> $GITHUB_ENV
          fi
      
      - name: Verificar imagem no Docker Hub e analisar plataformas
        if: env.IMAGEM_EXISTE == 'false'
        id: check-dockerhub
        run: |
          # Determinar se a imagem é oficial ou de namespace personalizado
          if [[ "${{ env.IMAGE_NAME }}" == *"/"* ]]; then
            # Imagem com namespace personalizado (ex: ethereum/client-go)
            NAMESPACE=$(echo "${{ env.IMAGE_NAME }}" | cut -d'/' -f1)
            IMAGE_SHORT=$(echo "${{ env.IMAGE_NAME }}" | cut -d'/' -f2-)
            DOCKERHUB_REPO="${NAMESPACE}/${IMAGE_SHORT}"
            DOCKERHUB_SCOPE="repository:${DOCKERHUB_REPO}:pull"
          else
            # Imagem oficial (ex: postgres, nginx)
            DOCKERHUB_REPO="library/${{ env.IMAGE_NAME }}"
            DOCKERHUB_SCOPE="repository:${DOCKERHUB_REPO}:pull"
          fi
          
          echo "Verificando imagem no Docker Hub: ${DOCKERHUB_REPO}:${{ env.IMAGE_TAG }}"
          
          # Obter token de autenticação para o Docker Hub
          TOKEN=$(curl -s "https://auth.docker.io/token?service=registry.docker.io&scope=${DOCKERHUB_SCOPE}" | jq -r .token)
          
          if [[ -z "$TOKEN" || "$TOKEN" == "null" ]]; then
            echo "Erro ao obter token de autenticação para o Docker Hub"
            echo "Escopo usado: ${DOCKERHUB_SCOPE}"
            exit 1
          fi
          
          # Verificar se o manifesto existe no Docker Hub
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.docker.distribution.manifest.list.v2+json,application/vnd.docker.distribution.manifest.v2+json" \
            "https://registry-1.docker.io/v2/${DOCKERHUB_REPO}/manifests/${{ env.IMAGE_TAG }}")
          
          echo "Docker Hub Status: $STATUS_CODE"
          
          if [[ "$STATUS_CODE" == "200" || "$STATUS_CODE" == "307" ]]; then
            echo "DOCKERHUB_EXISTE=true" >> $GITHUB_ENV
            echo "DOCKERHUB_REPO=${DOCKERHUB_REPO}" >> $GITHUB_ENV
            echo "Imagem encontrada no Docker Hub: ${DOCKERHUB_REPO}:${{ env.IMAGE_TAG }}"
            
            # Obter e analisar o manifesto para identificar plataformas suportadas
            MANIFEST=$(curl -s \
              -H "Authorization: Bearer $TOKEN" \
              -H "Accept: application/vnd.docker.distribution.manifest.list.v2+json,application/vnd.docker.distribution.manifest.v2+json" \
              "https://registry-1.docker.io/v2/${DOCKERHUB_REPO}/manifests/${{ env.IMAGE_TAG }}")
            
            # Verificar se é um manifesto de lista (multi-arquitetura)
            if echo "$MANIFEST" | jq -e '.manifests' > /dev/null; then
              echo "A imagem é multi-arquitetura. Plataformas disponíveis:"
              echo "$MANIFEST" | jq -r '.manifests[] | "- \(.platform.os)/\(.platform.architecture)\(.platform.variant // "")"'
              
              # Verificar se ARM64 está disponível
              if echo "$MANIFEST" | jq -e '.manifests[] | select(.platform.architecture=="arm64")' > /dev/null; then
                echo "ARM64 está disponível para esta imagem"
                echo "ARM64_DISPONIVEL=true" >> $GITHUB_ENV
              else
                echo "ARM64 NÃO está disponível para esta imagem"
                echo "ARM64_DISPONIVEL=false" >> $GITHUB_ENV
              fi
            else
              echo "A imagem tem apenas uma arquitetura:"
              echo "$MANIFEST" | jq -r '.architecture'
              
              if [[ "$(echo "$MANIFEST" | jq -r '.architecture')" == "arm64" ]]; then
                echo "ARM64_DISPONIVEL=true" >> $GITHUB_ENV
              else
                echo "ARM64_DISPONIVEL=false" >> $GITHUB_ENV
              fi
            fi
          else
            echo "DOCKERHUB_EXISTE=false" >> $GITHUB_ENV
            echo "Imagem não encontrada no Docker Hub: ${DOCKERHUB_REPO}:${{ env.IMAGE_TAG }} (Status: $STATUS_CODE)"
            exit 1
          fi
      
      # Usar a action oficial do Docker para login no GHCR
      - name: Login no GHCR
        if: env.IMAGEM_EXISTE == 'false' && env.DOCKERHUB_EXISTE == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}
      
      # Login no Docker Hub para garantir acesso completo às imagens
      - name: Login no Docker Hub
        if: env.IMAGEM_EXISTE == 'false' && env.DOCKERHUB_EXISTE == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Sincronizar imagem multi-arquitetura do Docker Hub para GHCR
        if: env.IMAGEM_EXISTE == 'false' && env.DOCKERHUB_EXISTE == 'true'
        run: |
          echo "Iniciando sincronização da imagem do Docker Hub para GHCR (com suporte multi-arquitetura)"
          
          # Configurar buildx para melhor suporte multi-arquitetura
          docker buildx create --use --name multi-arch-builder --driver docker-container --bootstrap
          
          SOURCE_IMAGE="docker.io/${{ env.DOCKERHUB_REPO }}:${{ env.IMAGE_TAG }}"
          TARGET_IMAGE="${{ env.GHCR_IMAGE }}"
          
          # Inspecionar a imagem de origem para depuração
          echo "Inspecionando o manifesto da imagem de origem:"
          docker buildx imagetools inspect $SOURCE_IMAGE --raw
          
          # Usar uma abordagem mais direta para copiar a imagem com todas as arquiteturas
          echo "Copiando a imagem com todas as arquiteturas disponíveis..."
          
          # Melhor abordagem com skopeo (mais confiável para copiar manifestos multi-plataforma)
          # Instalar skopeo
          sudo apt-get update && sudo apt-get install -y skopeo
          
          # Copiar imagem usando skopeo (preserva todos os manifests)
          skopeo copy --all docker://$SOURCE_IMAGE docker://$TARGET_IMAGE
          
          echo "Sincronização com suporte multi-arquitetura completa para: $TARGET_IMAGE"
          
          # Verificar se a imagem de destino foi sincronizada corretamente
          echo "Inspecionando o manifesto da imagem sincronizada:"
          docker buildx imagetools inspect $TARGET_IMAGE
      
      - name: Resultado da verificação
        run: |
          if [[ "${{ env.IMAGEM_EXISTE }}" == "true" ]]; then
            echo "A imagem já existe no GHCR, nenhuma ação necessária."
          elif [[ "${{ env.DOCKERHUB_EXISTE }}" != "true" ]]; then
            echo "Erro: A imagem não foi encontrada no Docker Hub."
          else
            echo "Imagem sincronizada com sucesso do Docker Hub para o GHCR."
            
            if [[ "${{ env.ARM64_DISPONIVEL }}" == "true" ]]; then
              echo "A imagem inclui suporte para ARM64 (Apple Silicon)."
            else
              echo "ATENÇÃO: A imagem original NÃO tem suporte para ARM64 (Apple Silicon)."
            fi
            
            if [[ "${{ env.FORCE_RESYNC }}" == "true" ]]; then
              echo "A ressincronização forçada foi concluída."
            fi
          fi