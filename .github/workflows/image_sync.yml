name: Docker Image Sync to GHCR

on:
  # Executa quando acionado manualmente
  workflow_dispatch:
    inputs:
      image_name:
        description: 'Nome da imagem (ex: postgres)'
        required: true
      image_tag:
        description: 'Tag da imagem (ex: 14.7)'
        required: true
  
  # Executa diariamente às 2h da manhã
  schedule:
    - cron: '0 2 * * *'
  
  # Permite que seja acionado por outro workflow ou API
  repository_dispatch:
    types: [image_sync_requested]

jobs:
  sync-image:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Determinar imagem a sincronizar
        id: set-image-info
        run: |
          # Usa inputs do workflow_dispatch se disponíveis
          if [[ -n "${{ github.event.inputs.image_name }}" ]]; then
            IMAGE_NAME="${{ github.event.inputs.image_name }}"
            IMAGE_TAG="${{ github.event.inputs.image_tag }}"
          # Usa dados do repository_dispatch
          elif [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            IMAGE_NAME="${{ github.event.client_payload.image_name }}"
            IMAGE_TAG="${{ github.event.client_payload.image_tag }}"
          # Para execução agendada, verificar imagens predefinidas
          else
            # Lista de imagens a verificar na execução agendada
            IMAGE_NAME="postgres"
            IMAGE_TAG="14.7"
          fi
          
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          
          # Define os nomes completos das imagens explicitamente
          DOCKERHUB_IMAGE="${IMAGE_NAME}:${IMAGE_TAG}"
          GHCR_IMAGE="ghcr.io/italoag/public/${IMAGE_NAME}:${IMAGE_TAG}"
          
          echo "DOCKERHUB_IMAGE=${DOCKERHUB_IMAGE}" >> $GITHUB_ENV
          echo "GHCR_IMAGE=${GHCR_IMAGE}" >> $GITHUB_ENV
          
          # Log para depuração
          echo "Imagem definida: ${IMAGE_NAME}:${IMAGE_TAG}"
          echo "Docker Hub: ${DOCKERHUB_IMAGE}"
          echo "GHCR: ${GHCR_IMAGE}"
      
      - name: Verificar se a imagem existe no GHCR
        id: check-ghcr
        continue-on-error: true
        run: |
          # Verificação HTTP para o manifesto da imagem no GHCR
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GHCR_PAT }}" \
            https://ghcr.io/v2/italoag/public/${{ env.IMAGE_NAME }}/manifests/${{ env.IMAGE_TAG }})
          
          echo "Status HTTP: $STATUS_CODE"
          
          if [[ "$STATUS_CODE" == "200" ]]; then
            echo "IMAGEM_EXISTE=true" >> $GITHUB_ENV
            echo "Imagem encontrada no GHCR"
          else
            echo "IMAGEM_EXISTE=false" >> $GITHUB_ENV
            echo "Imagem não encontrada no GHCR (Status: $STATUS_CODE)"
          fi
      
      - name: Verificar imagem no Docker Hub
        if: env.IMAGEM_EXISTE == 'false'
        id: check-dockerhub
        run: |
          # A API correta do Docker Hub para verificar tags é diferente
          # Usamos a API v2 do Docker Registry 
          
          # Primeiro, vamos obter o token de autenticação para acessar o Registry
          TOKEN=$(curl -s "https://auth.docker.io/token?service=registry.docker.io&scope=repository:library/${{ env.IMAGE_NAME }}:pull" | jq -r .token)
          
          if [[ -z "$TOKEN" || "$TOKEN" == "null" ]]; then
            echo "Erro ao obter token de autenticação para o Docker Hub"
            exit 1
          fi
          
          # Agora verificamos se o manifesto existe
          STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
            "https://registry-1.docker.io/v2/library/${{ env.IMAGE_NAME }}/manifests/${{ env.IMAGE_TAG }}")
          
          echo "Docker Hub Status: $STATUS_CODE"
          
          if [[ "$STATUS_CODE" == "200" || "$STATUS_CODE" == "307" ]]; then
            echo "DOCKERHUB_EXISTE=true" >> $GITHUB_ENV
            echo "Imagem encontrada no Docker Hub"
          else
            echo "DOCKERHUB_EXISTE=false" >> $GITHUB_ENV
            echo "Imagem não encontrada no Docker Hub (Status: $STATUS_CODE)"
            exit 1
          fi
      
      - name: Sincronizar imagem do Docker Hub para GHCR
        if: env.IMAGEM_EXISTE == 'false' && env.DOCKERHUB_EXISTE == 'true'
        run: |
          echo "Iniciando sincronização da imagem do Docker Hub para GHCR"
          
          # Depuração das variáveis de ambiente
          echo "Variáveis de ambiente:"
          echo "IMAGE_NAME: ${{ env.IMAGE_NAME }}"
          echo "IMAGE_TAG: ${{ env.IMAGE_TAG }}"
          echo "DOCKERHUB_IMAGE: ${{ env.DOCKERHUB_IMAGE }}"
          echo "GHCR_IMAGE: ${{ env.GHCR_IMAGE }}"
          
          # Puxar a imagem do Docker Hub
          echo "Puxando imagem do Docker Hub: ${{ env.DOCKERHUB_IMAGE }}"
          docker pull ${{ env.DOCKERHUB_IMAGE }}
          
          # Aplicar tag para GHCR
          echo "Aplicando tag para GHCR: ${{ env.GHCR_IMAGE }}"
          docker tag ${{ env.DOCKERHUB_IMAGE }} ${{ env.GHCR_IMAGE }}
          
          # Login no GHCR usando o Personal Access Token
          echo "Efetuando login no GHCR"
          echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u italoag --password-stdin
          
          # Enviar a imagem para o GHCR
          echo "Enviando imagem para o GHCR"
          docker push ${{ env.GHCR_IMAGE }}
          
          echo "Sincronização completa para: ${{ env.GHCR_IMAGE }}"
      
      - name: Resultado da verificação
        run: |
          if [[ "${{ env.IMAGEM_EXISTE }}" == "true" ]]; then
            echo "A imagem já existe no GHCR, nenhuma ação necessária."
          elif [[ "${{ env.DOCKERHUB_EXISTE }}" != "true" ]]; then
            echo "Erro: A imagem não foi encontrada no Docker Hub."
          else
            echo "Imagem sincronizada com sucesso do Docker Hub para o GHCR."
          fi
