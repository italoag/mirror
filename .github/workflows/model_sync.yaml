name: Sync Ollama Model to GHCR
on:
  workflow_dispatch:
    inputs:
      model_name:
        description: 'Nome do modelo (ex: deepseek-r1)'
        required: true
      model_tag:
        description: 'Tag do modelo (ex: 7b, 671b)'
        required: true
      force_resync:
        description: 'For√ßar ressincroniza√ß√£o mesmo se j√° existir'
        required: false
        type: boolean
        default: false
      make_public:
        description: 'Definir visibilidade p√∫blica ap√≥s push?'
        required: false
        type: boolean
        default: false
jobs:
  sync-model:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Set Variables
        id: vars
        run: |
          MODEL_NAME="${{ github.event.inputs.model_name }}"
          MODEL_TAG="${{ github.event.inputs.model_tag }}"
          FORCE="${{ github.event.inputs.force_resync }}"
          MAKE_PUBLIC="${{ github.event.inputs.make_public }}"
          MODEL_FULL="${MODEL_NAME}:${MODEL_TAG}"
          TARGET="ghcr.io/${{ github.repository_owner }}/${MODEL_NAME}:${MODEL_TAG}"
          echo "MODEL_NAME=${MODEL_NAME}" >> $GITHUB_ENV
          echo "MODEL_TAG=${MODEL_TAG}" >> $GITHUB_ENV
          echo "MAKE_PUBLIC=${MAKE_PUBLIC}" >> $GITHUB_ENV
          echo "MODEL_FULL=${MODEL_FULL}" >> $GITHUB_ENV
          echo "FORCE=${FORCE}" >> $GITHUB_ENV
          echo "TARGET=${TARGET}" >> $GITHUB_ENV
      
      - name: Instalar Depend√™ncias
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl
      
      - name: Login no GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}
      
      - name: Check if Image Exists
        id: check
        continue-on-error: true
        run: |
          IMAGE_EXISTS="false"
          if [[ "${FORCE}" != "true" ]]; then
            if docker manifest inspect "${TARGET}" >/dev/null 2>&1; then
              IMAGE_EXISTS="true"
              echo "‚úÖ J√° existe: ${TARGET}"
            fi
          fi
          echo "EXISTS=${IMAGE_EXISTS}" >> $GITHUB_ENV
      
      - name: Download direto da API do Ollama Registry
        if: env.EXISTS == 'false'
        run: |
          echo "üîÑ Sincronizando modelo ${MODEL_FULL} diretamente da API..."
          
          # Preparar diret√≥rios
          mkdir -p /tmp/ollama-api/model-files
          cd /tmp/ollama-api
          
          # Obter o manifesto do modelo
          REGISTRY_URL="https://registry.ollama.ai/v2/library/${MODEL_NAME}/manifests/${MODEL_TAG}"
          echo "üì• Baixando manifesto de: ${REGISTRY_URL}"
          
          curl -s "${REGISTRY_URL}" > manifest.json
          
          if [ ! -s manifest.json ]; then
            echo "‚ùå Falha ao baixar o manifesto!"
            exit 1
          fi
          
          echo "‚úÖ Manifesto baixado com sucesso"
          cat manifest.json | jq
          
          # Extrair layers do manifesto
          echo "üîç Extraindo informa√ß√µes de layers..."
          jq -r '.layers[].digest' manifest.json > layers.txt
          
          # Baixar cada layer
          mkdir -p model-files
          cat layers.txt | while read layer; do
            layer_file=$(echo $layer | sed 's/sha256://g')
            echo "üì• Baixando layer: ${layer}"
            curl -sL "https://registry.ollama.ai/v2/library/${MODEL_NAME}/blobs/${layer}" > "model-files/${layer_file}"
            
            # Verificar o tipo de layer baseado no manifesto
            layer_type=$(jq -r --arg layer "${layer}" '.layers[] | select(.digest == $layer) | .mediaType' manifest.json | sed 's|.*\.ollama\.image\.\(.*\)|\1|')
            echo "   Tipo: ${layer_type}"
            
            # Se for o arquivo de modelo, renomeie-o
            if [[ "${layer_type}" == "model" ]]; then
              echo "‚úÖ Encontrado arquivo principal do modelo: ${layer_file}"
              mv "model-files/${layer_file}" "model-files/model.bin"
            fi
          done
          
          # Verificar os arquivos baixados
          echo "üìã Arquivos baixados:"
          ls -lah model-files/
          
          # Verificar tamanho total
          TOTAL_SIZE=$(du -sh model-files/ | cut -f1)
          echo "üìä Tamanho total dos arquivos: ${TOTAL_SIZE}"
          
          # Criar Dockerfile
          cat > model-files/Dockerfile << EOF
          FROM scratch
          COPY . /
          LABEL org.opencontainers.image.title="${MODEL_FULL}"
          LABEL org.opencontainers.image.description="Ollama model ${MODEL_FULL} synced via GitHub Actions"
          CMD [""]
          EOF
          
          # Construir imagem Docker
          echo "üèóÔ∏è Construindo imagem Docker..."
          cd model-files/
          docker build -t ${TARGET} .
          
          # Verificar tamanho da imagem
          IMAGE_SIZE=$(docker image ls ${TARGET} --format "{{.Size}}")
          echo "üìä Tamanho da imagem Docker: ${IMAGE_SIZE}"
          
          if [[ "${IMAGE_SIZE}" == *"kB"* || "${IMAGE_SIZE}" == *"KB"* ]]; then
            KB_SIZE=$(echo "${IMAGE_SIZE}" | sed 's/[^0-9]//g')
            if [[ $KB_SIZE -lt 1000 ]]; then
              echo "‚ùå A imagem √© muito pequena (${IMAGE_SIZE})!"
              exit 1
            fi
          fi
          
          # Enviar imagem para GHCR
          echo "üì§ Enviando imagem para GHCR..."
          docker push ${TARGET}
          
      - name: Check & Set Visibility
        if: env.MAKE_PUBLIC == 'true'
        id: visibility
        run: |
          PACKAGE_NAME="${{ env.MODEL_NAME }}"
          PACKAGE_TYPE="container" # Ajuste se necess√°rio para outro tipo de pacote
          OWNER="italoag"

          # GET current visibility
          echo "üîç Verificando visibilidade atual do pacote ${PACKAGE_NAME}..."
          RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GHCR_PAT }}" \
            "https://api.github.com/orgs/${OWNER}/packages/${PACKAGE_TYPE}/${PACKAGE_NAME}")

          if [[ "$RESPONSE" -ne 200 ]]; then
            echo "‚ùå Falha ao obter a visibilidade do pacote. C√≥digo HTTP: $RESPONSE"
            cat response.json
            exit 1
          fi

          VIS=$(jq -r '.visibility' response.json)
          echo "VISIBILITY=${VIS}" >> $GITHUB_ENV
          echo "üîç Visibilidade atual: ${VIS}"

          # If not public, PATCH to set it public
          if [[ "$VIS" != "public" ]]; then
            echo "üîì Tornando p√∫blico o pacote ${PACKAGE_NAME}..."
            RESPONSE=$(curl -s -o response.json -w "%{http_code}" -X PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GHCR_PAT }}" \
              "https://api.github.com/orgs/${OWNER}/packages/${PACKAGE_TYPE}/${PACKAGE_NAME}" \
              -d '{"visibility":"public"}')

            if [[ "$RESPONSE" -ne 200 && "$RESPONSE" -ne 202 ]]; then
              echo "‚ùå Falha ao alterar a visibilidade do pacote. C√≥digo HTTP: $RESPONSE"
              cat response.json
              exit 1
            fi

            echo "‚úÖ O pacote agora √© p√∫blico."
          else
            echo "‚ÑπÔ∏è O pacote j√° estava p√∫blico."
          fi      
      
      - name: Result
        run: |
          if [[ "${EXISTS}" == "true" ]]; then
            echo "‚ÑπÔ∏è  Imagem j√° existia: ${TARGET}"
          else
            echo "‚úÖ  Modelo publicado: ${TARGET}"
          fi
          if [[ "${MAKE_PUBLIC}" == "true" ]]; then
            echo "üîî Visibilidade final: ${VISIBILITY}"
          else
            echo "üîî Visibilidade mantida como privada."
          fi
