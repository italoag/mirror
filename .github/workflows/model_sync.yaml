name: Sync Ollama Model to GHCR
on:
  workflow_dispatch:
    inputs:
      model_name:
        description: 'Nome do modelo (ex: deepseek-r1)'
        required: true
      model_tag:
        description: 'Tag do modelo (ex: 7b, 671b)'
        required: true
      force_resync:
        description: 'For√ßar ressincroniza√ß√£o mesmo se j√° existir'
        required: false
        type: boolean
        default: false
jobs:
  sync-model:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Set Variables
        id: vars
        run: |
          MODEL_NAME="${{ github.event.inputs.model_name }}"
          MODEL_TAG="${{ github.event.inputs.model_tag }}"
          FORCE="${{ github.event.inputs.force_resync }}"
          UPSTREAM="registry.ollama.ai/library/${MODEL_NAME}:${MODEL_TAG}"
          TARGET="ghcr.io/${{ github.repository_owner }}/public/${MODEL_NAME}:${MODEL_TAG}"
          echo "MODEL_NAME=${MODEL_NAME}"   >> $GITHUB_ENV
          echo "MODEL_TAG=${MODEL_TAG}"     >> $GITHUB_ENV
          echo "FORCE=${FORCE}"             >> $GITHUB_ENV
          echo "UPSTREAM=${UPSTREAM}"       >> $GITHUB_ENV
          echo "TARGET=${TARGET}"           >> $GITHUB_ENV
      
      - name: Login no GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}
      
      - name: Check if Image Exists
        id: check
        continue-on-error: true
        run: |
          if [[ "${FORCE}" != "true" ]]; then
            if docker manifest inspect "${TARGET}" >/dev/null 2>&1; then
              echo "EXISTS=true" >> $GITHUB_ENV
              echo "‚úÖ J√° existe: ${TARGET}"
            else
              echo "EXISTS=false" >> $GITHUB_ENV
            fi
          else
            echo "EXISTS=false" >> $GITHUB_ENV
            echo "üîÑ For√ßando ressincroniza√ß√£o"
          fi
      
      # Tentativa 1: Desabilitar Content Trust no comando espec√≠fico
      - name: Tentativa 1 - Pull com flag --disable-content-trust
        if: env.EXISTS == 'false'
        id: attempt1
        continue-on-error: true
        run: |
          echo "üì• Pull ${UPSTREAM}"
          docker pull --disable-content-trust "${UPSTREAM}"
          echo "ATTEMPT1_SUCCESS=true" >> $GITHUB_ENV
      
      # Tentativa 2: Instalar e usar Skopeo
      - name: Instalar Skopeo
        if: env.EXISTS == 'false' && env.ATTEMPT1_SUCCESS != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo
      
      - name: Tentativa 2 - Skopeo Copy
        if: env.EXISTS == 'false' && env.ATTEMPT1_SUCCESS != 'true'
        id: attempt2
        continue-on-error: true
        run: |
          echo "üîÑ Copiando com Skopeo ${UPSTREAM} para ${TARGET}"
          skopeo copy --all docker://${UPSTREAM} docker://${TARGET}
          echo "ATTEMPT2_SUCCESS=true" >> $GITHUB_ENV
      
      # Tentativa 3: Usar Crane
      - name: Instalar Crane
        if: env.EXISTS == 'false' && env.ATTEMPT1_SUCCESS != 'true' && env.ATTEMPT2_SUCCESS != 'true'
        run: |
          go install github.com/google/go-containerregistry/cmd/crane@latest
          export PATH=$PATH:$(go env GOPATH)/bin
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      
      - name: Tentativa 3 - Crane Copy
        if: env.EXISTS == 'false' && env.ATTEMPT1_SUCCESS != 'true' && env.ATTEMPT2_SUCCESS != 'true'
        id: attempt3
        continue-on-error: true
        run: |
          echo "üîÑ Copiando com Crane ${UPSTREAM} para ${TARGET}"
          crane copy "${UPSTREAM}" "${TARGET}"
          echo "ATTEMPT3_SUCCESS=true" >> $GITHUB_ENV
      
      # Continua√ß√£o do fluxo se a tentativa 1 foi bem-sucedida
      - name: Tag & Push ap√≥s Pull bem-sucedido
        if: env.EXISTS == 'false' && env.ATTEMPT1_SUCCESS == 'true'
        run: |
          echo "üè∑Ô∏è Tag ${TARGET}"
          docker tag "${UPSTREAM}" "${TARGET}"
          
          echo "üì§ Push ${TARGET}"
          docker push --disable-content-trust "${TARGET}"
      
      # Verifica√ß√£o final
      - name: Verificar resultado final
        if: always()
        run: |
          if [[ "${EXISTS}" == "true" ]]; then
            echo "‚ÑπÔ∏è Nenhuma a√ß√£o: imagem j√° existia em GHCR."
            exit 0
          elif [[ "${ATTEMPT1_SUCCESS}" == "true" || "${ATTEMPT2_SUCCESS}" == "true" || "${ATTEMPT3_SUCCESS}" == "true" ]]; then
            echo "‚úÖ Modelo publicado: ${TARGET}"
            echo "   Para usar: ollama pull ${TARGET}"
            exit 0
          else
            echo "‚ùå Todas as tentativas falharam."
            exit 1
          fi
